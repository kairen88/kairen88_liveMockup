
/*
 * Copyright Â© 2002 Sun Microsystems, Inc., 4150 Network Circle, Santa Clara,
 * California 95054, U.S.A. All rights reserved.  Sun Microsystems, Inc. has
 * intellectual property rights relating to technology embodied in the product
 * that is described in this document. In particular, and without limitation,
 * these intellectual property rights may include one or more of the U.S.
 * patents listed at http://www.sun.com/patents and one or more additional
 * patents or pending patent applications in the U.S. and in other countries.
 * U.S. Government Rights - Commercial software. Government users are subject
 * to the Sun Microsystems, Inc. standard license agreement and applicable
 * provisions of the FAR and its supplements.  Use is subject to license terms.
 * Sun,  Sun Microsystems,  the Sun logo and  Java are trademarks or registered
 * trademarks of Sun Microsystems, Inc. in the U.S. and other countries.  This
 * product is covered and controlled by U.S. Export Control laws and may be
 * subject to the export or import laws in other countries.  Nuclear, missile,
 * chemical biological weapons or nuclear maritime end uses or end users,
 * whether direct or indirect, are strictly prohibited.  Export or reexport
 * to countries subject to U.S. embargo or to entities identified on U.S.
 * export exclusion lists, including, but not limited to, the denied persons
 * and specially designated nationals lists is strictly prohibited.
 */


options {
  MULTI=true;
  VISITOR=true;
  NODE_DEFAULT_VOID=true;
  FORCE_LA_CHECK=true;
}

PARSER_BEGIN(ArithmeticParser)

package zz.csg.api.constraints.parser;

import java.io.StringReader;
import zz.csg.api.constraints.Constraint.*;

public class ArithmeticParser 
{
	public static void main(String args[]) 
	{
		try
		{
			SimpleNode n = parse("1+2*3");
			n.dump("");
			System.out.println("Thank you.");
		}
		catch (ParseException e)
		{
			e.printStackTrace();
		}	
	}
	
	public static synchronized SimpleNode parse(String aString) throws ParseException
	{
		if (! jj_initialized_once) new ArithmeticParser(new StringReader(aString));
		else ArithmeticParser.ReInit(new StringReader(aString));
		
		return ArithmeticParser.Start();
	}
}

PARSER_END(ArithmeticParser)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN :
{
  < #DIGIT: ["0" - "9"] >
}

TOKEN : /* LITERALS */
{ 
  < LONG: ( <DIGIT> )+ >
  | 
  < DOUBLE: ( <DIGIT> )+ "." ( <DIGIT> )* | "." ( <DIGIT> )+ >
  
}
  
TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER: ["_","a"-"z","A"-"Z"] >
}

ASTStart Start() #Start : {}
{
  Expression() 
  { return jjtThis; }
}


void Expression() #Rel : {}
{
  sum()
  rel(jjtThis)
  sum()
}

void rel(ASTRel rel) : {}
{
  ( "=" { rel.setOp (Operator.EQ); } )
  | ( ">=" { rel.setOp (Operator.GEQ); } )
  | ( "<=" { rel.setOp (Operator.LEQ); } )
}

void sum() : {}
{
  product()
    ( "+" product() #Add(2)	// Add with 2 descendants
    | "-" product() #Sub(2)
    )*
}

void product():		// product: term [{ ('*'|'%'|'/') term }];
  {}
  { term()
    ( "*" term() #Mul(2)
    | "/" term() #Div(2)
    )*
  }

void term():		// term: '+'term | '-'term | '('sum')' | Number;
  {}
  { "+" term()			// no need to make node
  | "-" term() #Minus		// insert sign change node
  | "(" sum() ")"
  | ( <LONG> { jjtThis.setValue (Long.parseLong(token.image)); } ) #Const
  | ( <DOUBLE> { jjtThis.setValue (Double.parseDouble(token.image)); } ) #Const
  | ( <IDENTIFIER> { jjtThis.setName (token.image); } ) #Identifier
  }