/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. ArithmeticParser.jj */
/*@egen*/
/*
 * Copyright \u00a9 2002 Sun Microsystems, Inc., 4150 Network Circle, Santa Clara,
 * California 95054, U.S.A. All rights reserved.  Sun Microsystems, Inc. has
 * intellectual property rights relating to technology embodied in the product
 * that is described in this document. In particular, and without limitation,
 * these intellectual property rights may include one or more of the U.S.
 * patents listed at http://www.sun.com/patents and one or more additional
 * patents or pending patent applications in the U.S. and in other countries.
 * U.S. Government Rights - Commercial software. Government users are subject
 * to the Sun Microsystems, Inc. standard license agreement and applicable
 * provisions of the FAR and its supplements.  Use is subject to license terms.
 * Sun,  Sun Microsystems,  the Sun logo and  Java are trademarks or registered
 * trademarks of Sun Microsystems, Inc. in the U.S. and other countries.  This
 * product is covered and controlled by U.S. Export Control laws and may be
 * subject to the export or import laws in other countries.  Nuclear, missile,
 * chemical biological weapons or nuclear maritime end uses or end users,
 * whether direct or indirect, are strictly prohibited.  Export or reexport
 * to countries subject to U.S. embargo or to entities identified on U.S.
 * export exclusion lists, including, but not limited to, the denied persons
 * and specially designated nationals lists is strictly prohibited.
 */


options {                                                        
  FORCE_LA_CHECK=true;
}

PARSER_BEGIN(ArithmeticParser)

package zz.csg.api.constraints.parser;

import java.io.StringReader;
import zz.csg.api.constraints.Constraint.*;

public class ArithmeticParser/*@bgen(jjtree)*/implements ArithmeticParserTreeConstants/*@egen*/ 
{/*@bgen(jjtree)*/
  protected static JJTArithmeticParserState jjtree = new JJTArithmeticParserState();

/*@egen*/
	public static void main(String args[]) 
	{
		try
		{
			SimpleNode n = parse("1+2*3");
			n.dump("");
			System.out.println("Thank you.");
		}
		catch (ParseException e)
		{
			e.printStackTrace();
		}	
	}
	
	public static synchronized SimpleNode parse(String aString) throws ParseException
	{
		if (! jj_initialized_once) new ArithmeticParser(new StringReader(aString));
		else ArithmeticParser.ReInit(new StringReader(aString));
		
		return ArithmeticParser.Start();
	}
}

PARSER_END(ArithmeticParser)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN :
{
  < #DIGIT: ["0" - "9"] >
}

TOKEN : /* LITERALS */
{ 
  < LONG: ( <DIGIT> )+ >
  | 
  < DOUBLE: ( <DIGIT> )+ "." ( <DIGIT> )* | "." ( <DIGIT> )+ >
  
}
  
TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER: ["_","a"-"z","A"-"Z"] >
}

ASTStart Start()        : {/*@bgen(jjtree) Start */
  ASTStart jjtn000 = new ASTStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Start */
  try {
/*@egen*/
  Expression()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/ 
  { return jjtn000; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


void Expression()      : {/*@bgen(jjtree) Rel */
  ASTRel jjtn000 = new ASTRel(JJTREL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Rel */
  try {
/*@egen*/
  sum()
  rel(jjtn000)
  sum()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void rel(ASTRel rel) : {}
{
  ( "=" { rel.setOp (Operator.EQ); } )
  | ( ">=" { rel.setOp (Operator.GEQ); } )
  | ( "<=" { rel.setOp (Operator.LEQ); } )
}

void sum() : {}
{
  product()
    ( "+"/*@bgen(jjtree) #Add( 2) */
          {
            ASTAdd jjtn001 = new ASTAdd(JJTADD);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
          }
          try {
/*@egen*/ product()/*@bgen(jjtree)*/
          } catch (Throwable jjte001) {
            if (jjtc001) {
              jjtree.clearNodeScope(jjtn001);
              jjtc001 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
              throw (RuntimeException)jjte001;
            }
            if (jjte001 instanceof ParseException) {
              throw (ParseException)jjte001;
            }
            throw (Error)jjte001;
          } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001,  2);
            }
          }
/*@egen*/	// Add with 2 descendants
    | "-"/*@bgen(jjtree) #Sub( 2) */
          {
            ASTSub jjtn002 = new ASTSub(JJTSUB);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
          }
          try {
/*@egen*/ product()/*@bgen(jjtree)*/
          } catch (Throwable jjte002) {
            if (jjtc002) {
              jjtree.clearNodeScope(jjtn002);
              jjtc002 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte002 instanceof RuntimeException) {
              throw (RuntimeException)jjte002;
            }
            if (jjte002 instanceof ParseException) {
              throw (ParseException)jjte002;
            }
            throw (Error)jjte002;
          } finally {
            if (jjtc002) {
              jjtree.closeNodeScope(jjtn002,  2);
            }
          }
/*@egen*/
    )*
}

void product():		// product: term [{ ('*'|'%'|'/') term }];
  {}
  { term()
    ( "*"/*@bgen(jjtree) #Mul( 2) */
          {
            ASTMul jjtn001 = new ASTMul(JJTMUL);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
          }
          try {
/*@egen*/ term()/*@bgen(jjtree)*/
          } catch (Throwable jjte001) {
            if (jjtc001) {
              jjtree.clearNodeScope(jjtn001);
              jjtc001 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
              throw (RuntimeException)jjte001;
            }
            if (jjte001 instanceof ParseException) {
              throw (ParseException)jjte001;
            }
            throw (Error)jjte001;
          } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001,  2);
            }
          }
/*@egen*/
    | "/"/*@bgen(jjtree) #Div( 2) */
          {
            ASTDiv jjtn002 = new ASTDiv(JJTDIV);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
          }
          try {
/*@egen*/ term()/*@bgen(jjtree)*/
          } catch (Throwable jjte002) {
            if (jjtc002) {
              jjtree.clearNodeScope(jjtn002);
              jjtc002 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte002 instanceof RuntimeException) {
              throw (RuntimeException)jjte002;
            }
            if (jjte002 instanceof ParseException) {
              throw (ParseException)jjte002;
            }
            throw (Error)jjte002;
          } finally {
            if (jjtc002) {
              jjtree.closeNodeScope(jjtn002,  2);
            }
          }
/*@egen*/
    )*
  }

void term():		// term: '+'term | '-'term | '('sum')' | Number;
  {}
  { "+" term()			// no need to make node
  | "-"/*@bgen(jjtree) Minus */
        {
          ASTMinus jjtn001 = new ASTMinus(JJTMINUS);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/ term()/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
        }
/*@egen*/		// insert sign change node
  | "(" sum() ")"
  |/*@bgen(jjtree) Const */
    {
      ASTConst jjtn002 = new ASTConst(JJTCONST);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
    }
    try {
/*@egen*/ ( <LONG>/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn002, true);
               jjtc002 = false;
             }
/*@egen*/ { jjtn002.setValue (Long.parseLong(token.image)); } )/*@bgen(jjtree)*/
    } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002, true);
      }
    }
/*@egen*/
  |/*@bgen(jjtree) Const */
    {
      ASTConst jjtn003 = new ASTConst(JJTCONST);
      boolean jjtc003 = true;
      jjtree.openNodeScope(jjtn003);
    }
    try {
/*@egen*/ ( <DOUBLE>/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn003, true);
                 jjtc003 = false;
               }
/*@egen*/ { jjtn003.setValue (Double.parseDouble(token.image)); } )/*@bgen(jjtree)*/
    } finally {
      if (jjtc003) {
        jjtree.closeNodeScope(jjtn003, true);
      }
    }
/*@egen*/
  |/*@bgen(jjtree) Identifier */
    {
      ASTIdentifier jjtn004 = new ASTIdentifier(JJTIDENTIFIER);
      boolean jjtc004 = true;
      jjtree.openNodeScope(jjtn004);
    }
    try {
/*@egen*/ ( <IDENTIFIER>/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn004, true);
                     jjtc004 = false;
                   }
/*@egen*/ { jjtn004.setName (token.image); } )/*@bgen(jjtree)*/
    } finally {
      if (jjtc004) {
        jjtree.closeNodeScope(jjtn004, true);
      }
    }
/*@egen*/
  }